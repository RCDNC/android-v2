buildscript {
    ext {
        compose_bom_version = '2025.01.01'
        kotlin_version = '1.9.25'
        hilt_version = '2.49'
        navigation_compose_version = '2.8.5'
        compose_version = '1.7.6'
        material3_version = '1.3.1'
        
        // 🎯 MULTI-PLATFORM DETECTION
        def osName = System.getProperty("os.name").toLowerCase()
        isWindows = osName.contains("windows")
        isLinux = osName.contains("linux") 
        isWsl = System.getenv("WSL_DISTRO_NAME") != null
        
        println "🔧 Platform: ${osName} (Windows: ${isWindows}, Linux: ${isLinux}, WSL: ${isWsl})"
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.9.25' apply false
    id 'com.android.application' version '8.7.3' apply false
    id 'com.android.library' version '8.7.3' apply false
    id 'org.jetbrains.kotlin.android' version '1.9.25' apply false
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.25' apply false
    id 'com.google.dagger.hilt.android' version '2.49' apply false
    id 'com.google.gms.google-services' version '4.4.2' apply false
    id 'com.github.ben-manes.versions' version '0.51.0'
}

// Configuração para mostrar apenas versões estáveis (release)
dependencyUpdates {
    // só sugere versões de release (ignora alfas/betas/RCs)
    revision = "release"
}

// 🎯 MULTI-PLATFORM TASK
task detectPlatform {
    doLast {
        def osName = System.getProperty("os.name").toLowerCase()
        def isWindows = osName.contains("windows")
        def isLinux = osName.contains("linux") 
        def isWsl = System.getenv("WSL_DISTRO_NAME") != null
        
        println "🔧 Platform detected: ${osName}"
        println "📍 Windows: ${isWindows}"
        println "📍 Linux: ${isLinux}" 
        println "📍 WSL: ${isWsl}"
        
        // Check local SDK
        def localSdk = "${projectDir}/android-sdk"
        if (new File(localSdk).exists()) {
            println "✅ Local Android SDK found: ${localSdk}"
        } else {
            println "❌ Local Android SDK not found: ${localSdk}"
        }
        
        // Check local.properties
        def localProps = file('local.properties')
        if (localProps.exists()) {
            println "✅ local.properties exists"
            localProps.eachLine { line ->
                if (line.startsWith('sdk.dir=')) {
                    println "📱 SDK path: ${line.substring(8)}"
                }
            }
        } else {
            println "❌ local.properties not found"
        }
    }
}