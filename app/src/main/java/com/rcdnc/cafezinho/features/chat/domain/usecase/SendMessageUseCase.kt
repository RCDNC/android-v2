package com.rcdnc.cafezinho.features.chat.domain.usecase

import com.rcdnc.cafezinho.features.chat.domain.model.Message
import com.rcdnc.cafezinho.features.chat.domain.repository.ChatRepository
import javax.inject.Inject
import javax.inject.Singleton

@Singleton
class SendMessageUseCase @Inject constructor(
    private val chatRepository: ChatRepository
) {
    suspend operator fun invoke(
        chatId: String,
        content: String,
        senderId: String,
        receiverId: String
    ): Result<Unit> {
        return try {
            when {
                chatId.isBlank() -> {
                    Result.failure(Exception("Chat ID cannot be empty"))
                }
                content.isBlank() -> {
                    Result.failure(Exception("Message content cannot be empty"))
                }
                senderId.isBlank() -> {
                    Result.failure(Exception("Sender ID cannot be empty"))
                }
                receiverId.isBlank() -> {
                    Result.failure(Exception("Receiver ID cannot be empty"))
                }
                content.length > 1000 -> {
                    Result.failure(Exception("Message too long (max 1000 characters)"))
                }
                else -> {
                    val message = Message(
                        id = "", // Will be generated by repository
                        senderId = senderId,
                        receiverId = receiverId,
                        content = sanitizeContent(content),
                        timestamp = System.currentTimeMillis(),
                        isRead = false,
                        messageType = "text"
                    )
                    
                    chatRepository.sendMessage(chatId, message)
                }
            }
        } catch (e: Exception) {
            Result.failure(e)
        }
    }

    private fun sanitizeContent(content: String): String {
        return content.trim()
            .replace(Regex("\\s+"), " ") // Replace multiple spaces with single space
            .take(1000) // Ensure max length
    }
}